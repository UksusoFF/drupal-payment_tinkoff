<?php
/**
 * @file
 * Contains hook implementations and global functions.
 */

/**
 * Implements hook_menu().
 */
function payment_tinkoff_menu()
{
  $items['payment_tinkoff/redirect/%entity_object'] = [
    'load arguments' => ['payment'],
    'title' => 'Go to payment server',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['payment_tinkoff_form_redirect', 2],
    'access callback' => 'payment_tinkoff_form_redirect_access',
    'access arguments' => [2],
    'type' => MENU_CALLBACK,
  ];

  $items['payment_tinkoff/process'] = [
    'title' => 'Process',
    'load arguments' => ['payment_method'],
    'page callback' => 'payment_tinkoff_process_callback',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];

  $items['payment_tinkoff/success'] = [
    'title' => 'Payment was successful',
    'load arguments' => ['payment_method'],
    'page callback' => 'payment_tinkoff_success_callback',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];

  $items['payment_tinkoff/fail'] = [
    'title' => 'Payment was not successful',
    'load arguments' => ['payment_method'],
    'page callback' => 'payment_tinkoff_fail_callback',
    'access callback' => true,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

function payment_tinkoff_theme()
{
  return [
    'payment_tinkoff_success' => [
      'template' => 'payment_tinkoff_success',
      'variables' => [
        'message' => null,
      ],
      'path' => drupal_get_path('module', 'payment_tinkoff') . '/templates'
    ],
    'payment_tinkoff_fail' => [
      'template' => 'payment_tinkoff_fail',
      'variables' => [
        'message' => null,
      ],
      'path' => drupal_get_path('module', 'payment_tinkoff') . '/templates'
    ],
  ];
}

/**
 * Return page callback for success payment status.
 */
function payment_tinkoff_success_callback()
{
  if (function_exists('uc_cart_empty')) {
    //This must be in payment_ubercart module. See: https://www.drupal.org/project/payment_ubercart/issues/2866042
    uc_cart_empty(uc_cart_get_id());
  }

  if (!empty(drupal_get_query_parameters())) {
    drupal_goto(current_path());
  }

  return theme('payment_tinkoff_success', [
    'message' => t('Thank you! Your payment was successful.'),
  ]);
}

/**
 * Return page callback for error payment status.
 */
function payment_tinkoff_fail_callback()
{
  if (!empty(drupal_get_query_parameters())) {
    drupal_goto(current_path());
  }

  return theme('payment_tinkoff_fail', [
    'message' => t('Your payment was not successful. Please <a href="/cart">try again</a> or contact us at <a href="mailto:!email">!email</a>.', [
      '!email' => variable_get('site_mail'),
    ]),
  ]);
}

/**
 * Processes an IPN request based on POST data.
 */
function payment_tinkoff_process_callback()
{
  $source = file_get_contents("php://input");
  $post_data = json_decode($source, true);

  if (!TinkoffPaymentController::validatePost($post_data)) {
    print 'bad data';
    drupal_exit();
  }

  /** @var \Payment $payment */
  $payment = entity_load_single('payment', $post_data['OrderId']);

  switch ($post_data['Status']) {
    case 'AUTHORIZED':
      $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_PENDING));
      break;
    case 'CONFIRMED':
      $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
      break;
    case 'REJECTED':
      $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_FAILED));
      break;
    case 'CANCELED':
    case 'REVERSED':
    case 'REFUNDED':
      $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_CANCELLED));
      break;
  }

  entity_save('payment', $payment);

  print 'OK';
  drupal_exit();
}

/**
 * Form build callback: the redirect form.
 *
 * @param array $form
 *   Form.
 * @param array $form_state
 *   Form state.
 * @param Payment $payment
 *   Payment object.
 *
 * @return array
 *   Payment form array.
 */
function payment_tinkoff_form_redirect(array $form, array &$form_state, Payment $payment)
{
  $form = TinkoffPaymentController::getPaymentForm($payment);
  $form['#attached']['js'] = [
    drupal_get_path('module', 'payment_tinkoff') . '/redirect_autosubmit.js',
  ];
  $form['#prefix'] = '<div class="payment-tinkoff-redirect-form">';
  $form['#suffix'] = '</div>';
  $form['#method'] = 'GET';
  $form['#pre_render'][] = '_payment_tinkoff_clean_form';
  $form['message'] = [
    '#type' => 'markup',
    '#markup' => '<p>' . t('You will be redirected to the off-site payment server to authorize the payment.') . '</p>',
  ];

  return $form;
}

/**
 * Cleanup external redirect form.
 *
 * @param array $form
 *   Form for cleanup.
 *
 * @return array
 *   Cleaned form.
 */
function _payment_tinkoff_clean_form(array $form)
{
  unset($form['form_token']);
  unset($form['form_build_id']);
  unset($form['form_id']);

  return $form;
}

/**
 * Access callback for the redirect page.
 *
 * @param Payment $payment
 *   The payment to check access to.
 * @param object $account
 *   An optional user to check access for. If NULL, then the currently logged
 *   in user is used.
 *
 * @return bool
 *   TRUE if access allowed FALSE otherwise.
 */
function payment_tinkoff_form_redirect_access(Payment $payment, $account = null)
{
  if (!$account) {
    global $user;
    $account = $user;
  }

  return $account->uid == $payment->uid &&
    is_a($payment->method->controller, 'TinkoffPaymentController')
    && payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_PENDING);
}

/**
 * Implements hook_payment_method_controller_info().
 */
function payment_tinkoff_payment_method_controller_info()
{
  return ['TinkoffPaymentController'];
}

/**
 * Implements hook_entity_load().
 */
function payment_tinkoff_entity_load(array $entities, $entity_type)
{
  if ($entity_type == 'payment_method') {
    $pmids = [];
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'TinkoffPaymentController') {
        $pmids[] = $payment_method->pmid;
      }
    }
    if ($pmids) {
      $query = db_select('payment_tinkoff')
        ->fields('payment_tinkoff')
        ->condition('pmid', $pmids);
      $result = $query->execute();
      while ($data = $result->fetchAssoc()) {
        $payment_method = $entities[$data['pmid']];
        $payment_method->controller_data = (array)$data;
        unset($payment_method->controller_data['pmid']);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function payment_tinkoff_payment_method_insert(PaymentMethod $payment_method)
{
  if ($payment_method->controller->name == 'TinkoffPaymentController') {
    $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values = array_merge($payment_method->controller_data, [
      'pmid' => $payment_method->pmid,
    ]);
    $query = db_insert('payment_tinkoff')
      ->fields($values);
    $query->execute();
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function payment_tinkoff_payment_method_update(PaymentMethod $payment_method)
{
  if ($payment_method->controller->name == 'TinkoffPaymentController') {
    $query = db_update('payment_tinkoff');
    $values = array_merge($payment_method->controller_data, [
      'pmid' => $payment_method->pmid,
    ]);
    $query->fields($values);
    $query->condition('pmid', $payment_method->pmid);
    $query->execute();
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function payment_tinkoff_payment_method_delete($entity)
{
  if ($entity->controller->name == 'TinkoffPaymentController') {
    db_delete('payment_tinkoff')
      ->condition('pmid', $entity->pmid)
      ->execute();
  }
}

/**
 * Payment method configuration form elements callback.
 *
 * Implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 *
 * @return array
 *   A Drupal form.
 */
function payment_tinkoff_payment_method_configuration_form_elements(array $form, array &$form_state)
{
  $payment_method = $form_state['payment_method'];
  $controller = $payment_method->controller;
  $controller_data = $payment_method->controller_data + $controller->controller_data_defaults;

  return [
    'mode' => [
      '#type' => 'radios',
      '#title' => t('Mode'),
      '#options' => [
        'live' => t('Live - use for real transactions.'),
        'test' => t('Test - use for testing payments.'),
      ],
      '#default_value' => $controller_data['mode'],
      '#required' => true,
    ],
    'live_terminal_login' => [
      '#type' => 'textfield',
      '#title' => t('Live terminal login'),
      '#description' => t('Your Tinkoff live terminal login.'),
      '#default_value' => $controller_data['live_terminal_login'],
      '#required' => false,
    ],
    'live_terminal_pass' => [
      '#type' => 'textfield',
      '#title' => t('Live terminal password'),
      '#description' => t('Your Tinkoff live terminal password.'),
      '#default_value' => $controller_data['live_terminal_pass'],
      '#required' => false,
    ],
    'test_terminal_login' => [
      '#type' => 'textfield',
      '#title' => t('Test terminal login'),
      '#description' => t('Your Tinkoff test terminal login.'),
      '#default_value' => $controller_data['test_terminal_login'],
      '#required' => false,
    ],
    'test_terminal_pass' => [
      '#type' => 'textfield',
      '#title' => t('Test terminal password'),
      '#description' => t('Your Tinkoff test terminal password.'),
      '#default_value' => $controller_data['test_terminal_pass'],
      '#required' => false,
    ],
  ];
}

/**
 * Form validate callback.
 *
 * Implements form validate callback for
 * interkassa_payment_payment_method_configuration_form_elements().
 */
function payment_tinkoff_payment_method_configuration_form_elements_validate(array $element, array &$form_state)
{
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $controller_data = &$form_state['payment_method']->controller_data;
  $controller_data['mode'] = $values['mode'];
  $controller_data['live_terminal_login'] = $values['live_terminal_login'];
  $controller_data['live_terminal_pass'] = $values['live_terminal_pass'];
  $controller_data['test_terminal_login'] = $values['test_terminal_login'];
  $controller_data['test_terminal_pass'] = $values['test_terminal_pass'];
}

/**
 * Payment configuration form elements callback.
 *
 * Implements
 * PaymentMethodController::payment_configuration_form_elements_callback.
 */
function payment_tinkoff_payment_configuration_form_elements(array $element, array &$form_state)
{
  return [];
}
